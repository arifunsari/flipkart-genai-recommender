## this is my workflow this will automate my deployment as soon as i commit my code , it will automatically run the pipline.

name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

 build-and-push-ecr-image:
  name: Continuous Delivery
  needs: integration
  runs-on: ubuntu-latest
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Utilities
      run: |
        sudo apt-get update
        sudo apt-get install -y jq unzip

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1   # ✅ fix region here directly

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: flipkart-image   # ✅ hardcoded repo name
        IMAGE_TAG: latest
      run: |
        # Build docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        # Push docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # Save output for later jobs
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        

          
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      
      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME}}:latest
         
      # - name: Stop and remove  container if running
      #   run: |
      #    docker ps -q --filter "name=filpkart" | grep -q . && docker stop filpkart && docker rm -fv filpkart
       
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 5000:5000 --ipc="host" --name=filpkart -e 'GROQ_API_KEY'=${{secrets.GROQ_API_KEY}} -e 'ASTRA_DB_API_ENDPOINT'=${{secrets.ASTRA_DB_API_ENDPOINT}} -e 'ASTRA_DB_APPLICATION_TOKEN'=${{secrets.ASTRA_DB_APPLICATION_TOKEN}} -e 'ASTRA_DB_KEYSPACE'=${{secrets.ASTRA_DB_KEYSPACE}} -e 'HF_TOKEN'=${{secrets.HF_TOKEN}}  -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      - name: Clean previous images and containers
        run: |
         docker system prune -f




